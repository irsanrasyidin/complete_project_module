name: Test, Release, and Deploy

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    outputs:
      test_result: ${{ job.status }} 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod tidy

      - name: Run tests
        run: go test -v ./...

      - name: Cleanup unused cache (optional)
        run: go clean -modcache

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: test
    if: ${{ needs.test.result == 'success' }} # Only run if tests pass
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest tag
        id: get_tag
        run: echo "TAG_NAME=$(date +'%Y.%m.%d-%H%M%S')" >> $GITHUB_ENV

      - name: Create new tag
        run: |
          git tag ${{ env.TAG_NAME }}
          git push origin ${{ env.TAG_NAME }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }}
          generate_release_notes: true
          draft: false
          prerelease: false
          
  deploy:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: create_release
    if: ${{ needs.create_release.result == 'success' }}
    permissions:
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: echo "TAG_NAME=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Build Docker Image
        run: docker build -t ghcr.io/${{ github.repository }}:${{ env.TAG_NAME }} .

      - name: Push Docker Image
        run: docker push ghcr.io/${{ github.repository }}:${{ env.TAG_NAME }}
