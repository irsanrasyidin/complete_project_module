name: Create Release on Merge to Main

on:
  push:
    branches:
      - main
  workflow_dispatch: 

    inputs:
      version_bump:
        description: 'Type of version bump (major, minor, patch)'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    outputs:
      test_result: ${{ job.status }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod tidy

      - name: Run tests
        run: go test -v ./...

      - name: Cleanup unused cache (optional)
        run: go clean -modcache

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: test
    if: ${{ needs.test.result == 'success' }}
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to fetch tags
        
      - name: Fetch all tags
        run: git fetch --tags
    
      - name: Debug - List all tags
        run: git tag

      - name: Get latest tag
        id: get_latest_tag
        run: |
          TAGS=$(git tag | grep '^v' | sort -V)
          LATEST_TAG=$(echo "$TAGS" | tail -n 1)
          echo "Latest tag: $LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Increment tag
        id: increment_tag
        run: |
          # Get the version bump type from the input
          BUMP_TYPE="${{ github.event.inputs.version_bump }}"

          # Extract version parts
          VERSION=${{ env.LATEST_TAG }}
          MAJOR=$(echo $VERSION | sed -E 's/^v([0-9]+)\..*/\1/')
          MINOR=$(echo $VERSION | sed -E 's/^v[0-9]+\.([0-9]+)\..*/\1/')
          PATCH=$(echo $VERSION | sed -E 's/^v[0-9]+\.[0-9]+\.([0-9]+)/\1/')

          # Increment version based on bump type
          if [ "$BUMP_TYPE" = "major" ]; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_MINOR=0
            NEW_PATCH=0
          elif [ "$BUMP_TYPE" = "minor" ]; then
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$((MINOR + 1))
            NEW_PATCH=0
          else # patch
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$MINOR
            NEW_PATCH=$((PATCH + 1))
          fi

          # Create new tag name
          NEW_TAG="v${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
          echo "New tag: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Configure Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Authenticate with GitHub Token
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Create new tag
        run: |
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}

      - name: Create GitHub Release with Notes
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: ${{ env.NEW_TAG }}
          generate_release_notes: true
          draft: false
          prerelease: false

  # deploy:
  #   name: Build and Push Docker Image
  #   runs-on: ubuntu-latest
  #   needs: create_release
  #   if: ${{ needs.create_release.result == 'success' }}
  #   permissions:
  #     packages: write

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Debug - Print Repository
  #       run: | 
  #         echo "Repository: ${{ github.repository }}"

  #     - name: Get latest tag (from create_release job)
  #       id: get_tag
  #       run: echo "TAG_NAME=${{ needs.create_release.outputs.release_tag }}" >> $GITHUB_ENV

  #     - name: Login to GitHub Container Registry
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

  #     - name: Build Docker Image
  #       run: docker build -t ghcr.io/${{ github.repository }}:${{ env.NEW_TAG }} .

  #     - name: Push Docker Image
  #       run: docker push ghcr.io/${{ github.repository }}:${{ env.NEW_TAG }}
